{"version":3,"sources":["../../src/routers/login.js"],"names":["req","res","token","headers","body","username","pwd","console","log","send","code","msg","connection","query","err","result","length","JSON","stringify","data","map","v","createConnection","host","user","password","database","port","insecureAuth","tel","connect"],"mappings":";;;;;;kBA6Be,UAAUA,GAAV,EAAeC,GAAf,EAAoB;AACjC,MAAMC,QAAQF,IAAIG,OAAJ,CAAYD,KAA1B;AADiC,kBAETF,IAAII,IAFK;AAAA,MAE1BC,QAF0B,aAE1BA,QAF0B;AAAA,MAEhBC,GAFgB,aAEhBA,GAFgB;;AAGjC,MAAIJ,KAAJ,EAAW;AACT;AACAK,YAAQC,GAAR,CAAY,uBAAWN,KAAX,EAAkB,MAAlB,CAAZ;AACAD,QAAIQ,IAAJ,CAAS;AACPC,YAAM,CADC;AAEPC,WAAK;AAFE,KAAT;AAID,GAPD,MAOO;AACLC,eAAWC,KAAX,CAAiB,yCAAjB,EAA4D,CAACR,QAAD,CAA5D,EAAwE,UAACS,GAAD,EAAMC,MAAN,EAAiB;AACvF,UAAID,GAAJ,EAAS;AACP,cAAMA,GAAN;AACD,OAFD,MAEO;AACL,YAAIC,OAAOC,MAAP,GAAgB,CAApB,EAAuB;AACrBf,cAAIQ,IAAJ,CAAS;AACPC,kBAAM,CADC;AAEPC,iBAAK,MAFE;AAGPT,mBAAO,uBAAWe,KAAKC,SAAL,CAAeH,OAAO,CAAP,CAAf,CAAX,EAAsC,MAAtC;AAHA,WAAT;AAKD,SAND,MAMO;AACLd,cAAIQ,IAAJ,CAAS;AACPC,kBAAM,CADC;AAEPC,iBAAK;AAFE,WAAT;AAID;AACF;AACF,KAjBD;AAkBA;AACA;AACAQ,SAAKC,GAAL,CAAS,aAAK;AACZ,UAAIf,YAAYgB,EAAEhB,QAAd,IAA0BC,OAAOe,EAAEf,GAAvC,EAA4C;AAC1CL,YAAIQ,IAAJ,CAAS;AACPC,gBAAM,CADC;AAEPC,eAAK,MAFE;AAGPT,iBAAO,uBAAWe,KAAKC,SAAL,CAAe;AAC/Bb,8BAD+B;AAE/BC;AAF+B,WAAf,CAAX,EAGH,MAHG;AAHA,SAAT;AAQD;AACF,KAXD;AAYAL,QAAIQ,IAAJ,CAAS;AACPC,YAAM,CADC;AAEPC,WAAK;AAFE,KAAT;AAID;AACF,C;;AA3ED;;;;AACA;;;;AAHA;AACA;AAGA,IAAMC,aAAa,gBAAMU,gBAAN,CAAuB;AACxCC,QAAM,WADkC;AAExCC,QAAM,MAFkC;AAGxCC,YAAU,QAH8B;AAIxCC,YAAU,UAJ8B;AAKxCC,QAAM,IALkC;AAMxCC,gBAAc;AAN0B,CAAvB,CAAnB;;AASA,IAAMT,OAAO,CACX;AACEd,YAAU,IADZ;AAEEC,OAAK,QAFP;AAGEuB,OAAK;AAHP,CADW,EAKR;AACDxB,YAAU,IADT;AAEDC,OAAK,QAFJ;AAGDuB,OAAK;AAHJ,CALQ,CAAb;AAWA;AACAjB,WAAWkB,OAAX,CAAmB,eAAO;AACxBvB,UAAQC,GAAR,CAAYM,GAAZ;AACD,CAFD","file":"login.js","sourcesContent":["// 登录页 \r\n// 获取数据库数据\r\nimport mysql from 'mysql'\r\nimport {aesEncrypt, aesDecrypt} from '../modules/utils'\r\nconst connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '123456',\r\n  database: 'userInfo',\r\n  port: 9090,\r\n  insecureAuth: true\r\n});\r\n\r\nconst data = [\r\n  {\r\n    username: '张三',\r\n    pwd: '123456',\r\n    tel: '13212344321'\r\n  }, {\r\n    username: '李四',\r\n    pwd: '123456',\r\n    tel: '13212344321'\r\n  }\r\n]\r\n// 判断connection链接是否成功 \r\nconnection.connect(err => {\r\n  console.log(err)\r\n})\r\n\r\nexport default function (req, res) {\r\n  const token = req.headers.token\r\n  const {username, pwd} = req.body\r\n  if (token) {\r\n    // 已经存在登录\r\n    console.log(aesDecrypt(token, '1511'))\r\n    res.send({\r\n      code: 0,\r\n      msg: '已存在登录用户，请退出登录'\r\n    })\r\n  } else {\r\n    connection.query('select * from userinfo where username=?', [username], (err, result) => {\r\n      if (err) {\r\n        throw err\r\n      } else {\r\n        if (result.length > 0) {\r\n          res.send({\r\n            code: 1,\r\n            msg: '登陆成功',\r\n            token: aesEncrypt(JSON.stringify(result[0]), '1511')\r\n          })\r\n        } else {\r\n          res.send({\r\n            code: 0,\r\n            msg: '登录失败，用户名不存在，请前往注册'\r\n          })\r\n        }\r\n      }\r\n    })\r\n    // 没有登录\r\n    // 有相同的 用户名密码匹配\r\n    data.map(v => {\r\n      if (username == v.username && pwd == v.pwd) {\r\n        res.send({\r\n          code: 1,\r\n          msg: '登陆成功',\r\n          token: aesEncrypt(JSON.stringify({\r\n            username,\r\n            pwd\r\n          }), '1511')\r\n        })\r\n      }\r\n    })\r\n    res.send({\r\n      code: 0,\r\n      msg: '用户未注册，请前往注册'\r\n    })\r\n  }\r\n}"]}